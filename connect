const express = require('express');
const app = express();
const MongoClient = require('mongodb').MongoClient;
const bcrypt = require('bcrypt');

// Connection URL
const url = 'mongodb://localhost:27017';

// Database name
const dbName = 'members';

// Collection name
const collectionName = 'users';

// Create a new MongoClient
MongoClient.connect(url, function(err, client) {
  if (err) {
    console.log(err);
  } else {
    console.log('Connected to MongoDB');

    // Create the database
    const db = client.db(dbName);

    // Create the users collection
    const usersCollection = db.collection(collectionName);

    // Middleware to parse JSON bodies
    app.use(express.json());

    // Register endpoint
    app.post('/register', function(req, res) {
      const { username, email, password } = req.body;
      const hashedPassword = bcrypt.hashSync(password, 10);
      const user = { username, email, password: hashedPassword };
      usersCollection.insertOne(user, function(err, result) {
        if (err) {
          res.status(400).send({ message: 'Error creating user' });
        } else {
          res.send({ message: 'User created successfully' });
        }
      });
    });

    // Login endpoint
    app.post('/login', function(req, res) {
      const { username, password } = req.body;
      usersCollection.findOne({ username }, function(err, user) {
        if (err || !user) {
          res.status(401).send({ message: 'Invalid username or password' });
        } else {
          const isValidPassword = bcrypt.compareSync(password, user.password);
          if (isValidPassword) {
            res.send({ message: 'Login successful' });
          } else {
            res.status(401).send({ message: 'Invalid username or password' });
          }
        }
      });
    });

    // Get all users endpoint
    app.get('/users', function(req, res) {
      usersCollection.find().toArray(function(err, users) {
        if (err) {
          res.status(500).send({ message: 'Error fetching users' });
        } else {
          res.send(users);
        }
      });
    });

    // Get user by ID endpoint
    app.get('/users/:id', function(req, res) {
      const id = req.params.id;
      usersCollection.findOne({ _id: id }, function(err, user) {
        if (err || !user) {
          res.status(404).send({ message: 'User not found' });
        } else {
          res.send(user);
        }
      });
    });

    // Update user endpoint
    app.put('/users/:id', function(req, res) {
      const id = req.params.id;
      const { username, email, password } = req.body;
      const hashedPassword = bcrypt.hashSync(password, 10);
      const user = { username, email, password: hashedPassword };
      usersCollection.updateOne({ _id: id }, { $set: user }, function(err, result) {
        if (err) {
          res.status(400).send({ message: 'Error updating user' });
        } else {
          res.send({ message: 'User updated successfully' });
        }
      });
    });

    // Delete user endpoint
    app.delete('/users/:id', function(req, res) {
      const id = req.params.id;
      usersCollection.deleteOne({ _id: id }, function(err, result) {
        if (err) {
          res.status(400).send({ message: 'Error deleting user' });
        } else {
          res.send({ message: 'User deleted successfully' });
        }
      });
    });

    // Start the server
    const port = 3000;
    app.listen(port, function() {
      console.log(`Server started on port ${port}`);
    });
  }
});